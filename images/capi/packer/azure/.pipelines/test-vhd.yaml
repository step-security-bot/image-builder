# Required pipeline variables:
# - BUILD_POOL - Azure DevOps build pool to use
# - CONTAINER_IMAGE - Dev container image URL to use. Should have Azure CLI, Packer and Ansible.
# - AZURE_TENANT_ID - tenant ID
# - AZURE_CLIENT_ID - Service principal ID
# - AZURE_CLIENT_SECRET - Service principal secret
# - AZURE_SUBSCRIPTION_ID - Subscription ID used by the pipeline
# - KUBERNETES_VERSION - version of Kubernetes to build the image with, e.g. `1.16.2`
# - OS - target of build e.g. `Ubuntu/Windows`
# - OS_VERSION - target of build e.g. `18.04/2004/2019`

jobs:
- job: test_vhd
  container: $[ variables['CONTAINER_IMAGE'] ]
  timeoutInMinutes: 120
  strategy:
    maxParallel: 0
  pool:
    name: $(BUILD_POOL)
  steps:
  - task: DownloadPipelineArtifact@2
    inputs:
      source: current
      artifact: publishing-info
      path: $(system.defaultWorkingDirectory)/images/capi/packer/azure/vhd/
  - script: |
      set -x
      set -eou pipefail

      VHD_RESOURCE_ID=$(jq -r .vhd_url $(system.defaultWorkingDirectory)/images/capi/packer/azure/vhd/vhd-publishing-info.json)

      # Create a managed image from the VHD blob
      # TODO: Verify that provisioning is constrained to southcentralus (where "cluster-api-images" lives) or not
      az login -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --service-principal --tenant $AZURE_TENANT_ID
      az image create -n testvmimage -g cluster-api-images --os-type Linux --source $VHD_RESOURCE_ID

      # Pass the managed image resource ID on to the next step
      IMAGE_ID=$(az image show -g cluster-api-images -n testvmimage --query '[id]' --output tsv)
      ##vso[task.setvariable variable=MANAGED_IMAGE_ID;]$IMAGE_ID
    displayName: promote VHD blob to managed image
    env:
      AZURE_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
  - script: |
      set -x
      set -eou pipefail

      # TODO: why is managed image id not available here?
      echo "Found managed image id: $MANAGED_IMAGE_ID"
      echo "Found image id: $IMAGE_ID"

      # Set up the Azure CLI Cluster API extension
      az extension add --yes --source https://github.com/Azure/azure-capi-cli-extension/releases/download/v0.0.5/capi-0.0.5-py2.py3-none-any.whl

      # Use the Azure location of the managed image for `az capi create`
      AZURE_LOCATION=$(az image show -g cluster-api-images -n testvmimage --query '[location]' --output tsv)
      az capi create \
        --kubernetes-version=$KUBERNETES_VERSION \
        --location=$AZURE_LOCATION \
        --control-plane-machine-count=1 \
        --node-machine-count=1
        --template=$(system.defaultWorkingDirectory)/images/capi/packer/azure/scripts/test-templates/cluster-template.yaml
      # TODO: clean up the managed image
    displayName: test the managed image
    env:
      AZURE_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)

