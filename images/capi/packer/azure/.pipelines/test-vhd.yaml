# Required pipeline variables:
# - BUILD_POOL - Azure DevOps build pool to use
# - CONTAINER_IMAGE - Dev container image URL to use. Should have Azure CLI, Packer and Ansible.
# - AZURE_TENANT_ID - tenant ID
# - AZURE_CLIENT_ID - Service principal ID
# - AZURE_CLIENT_SECRET - Service principal secret
# - AZURE_SUBSCRIPTION_ID - Subscription ID used by the pipeline
# - KUBERNETES_VERSION - version of Kubernetes to build the image with, e.g. `1.16.2`
# - OS - target of build e.g. `Ubuntu/Windows`
# - OS_VERSION - target of build e.g. `18.04/2004/2019`

jobs:
- job: test_vhd
  container: $[ variables['CONTAINER_IMAGE'] ]
  timeoutInMinutes: 120
  strategy:
    maxParallel: 0
  pool:
    name: $(BUILD_POOL)
  steps:
  - task: DownloadPipelineArtifact@2
    inputs:
      source: current
      artifact: publishing-info
      path: $(system.defaultWorkingDirectory)/images/capi/packer/azure/vhd/
  - script: |
      set -x
      set -e -o pipefail

      VHD_RESOURCE_ID=$(jq -r .vhd_url $(system.defaultWorkingDirectory)/images/capi/packer/azure/vhd/vhd-publishing-info.json)
      VHD_INFO=$(jq . $(system.defaultWorkingDirectory)/images/capi/packer/azure/vhd/vhd-publishing-info.json)
      STORAGE_ACCOUNT_NAME=$(jq -r .storage_account_name $(system.defaultWorkingDirectory)/images/capi/packer/azure/vhd/vhd-publishing-info.json)
      RANDOM=$(bash -c 'echo $RANDOM')
      RESOURCE_GROUP="capi-testvmimage-${RANDOM}"

      # Azure CLI login
      az login -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --service-principal --tenant $AZURE_TENANT_ID

      # Find the VHD blob location from its storage account
      AZURE_LOCATION=$(az storage account show --name "${STORAGE_ACCOUNT_NAME}" --query '[location]' -o tsv)

      # Create the resource group
      az group create --name "${RESOURCE_GROUP}" --location "${AZURE_LOCATION}"

      # Create a managed image from the VHD blob
      az image create -n testvmimage -g "${RESOURCE_GROUP}" --os-type Linux --source "${VHD_RESOURCE_ID}"

      # Pass the managed image resource ID on to the next step
      IMAGE_ID=$(az image show -g "${RESOURCE_GROUP}" -n testvmimage --query '[id]' --output tsv)
      echo "##vso[task.setvariable variable=MANAGED_IMAGE_ID;]$IMAGE_ID"
      echo "##vso[task.setvariable variable=RESOURCE_GROUP;]$RESOURCE_GROUP"
      echo "##vso[task.setvariable variable=AZURE_LOCATION;]$AZURE_LOCATION"
    displayName: promote VHD blob to managed image
    env:
      AZURE_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
  - script: |
      set -x
      set -e -o pipefail

      # Export managed image id for cluster template
      export MANAGED_IMAGE_ID=$(MANAGED_IMAGE_ID)
      export RESOURCE_GROUP=$(RESOURCE_GROUP)
      export AZURE_LOCATION=$(AZURE_LOCATION)
      os=$(echo "$OS" | tr '[:upper:]' '[:lower:]')

      # Set up the Azure CLI Cluster API extension
      az extension add --yes --source https://github.com/Azure/azure-capi-cli-extension/releases/download/az-capi-nightly/capi-0.0.vnext-py2.py3-none-any.whl

      # Install required binaries
      mkdir ~/test-binaries
      export PATH=$PATH:~/test-binaries
      az capi install -a -ip ~/test-binaries

      if [ "$OS" == "Windows" ]; then
        TEST_TEMPLATE=$(system.defaultWorkingDirectory)/images/capi/packer/azure/scripts/test-templates/cluster-template-windows.yaml
      else
        TEST_TEMPLATE=$(system.defaultWorkingDirectory)/images/capi/packer/azure/scripts/test-templates/cluster-template.yaml
      fi

      # Create a cluster
      az capi create \
        --yes \
        --debug \
        --name testvm \
        --kubernetes-version=$KUBERNETES_VERSION \
        --location=$AZURE_LOCATION \
        --resource-group=$RESOURCE_GROUP \
        --management-cluster-resource-group-name=$RESOURCE_GROUP \
        --control-plane-machine-count=1 \
        --node-machine-count=1 \
        --template=$TEST_TEMPLATE

      # Clean up the test resource group
      az group delete -n "${RESOURCE_GROUP}" --yes --no-wait
    displayName: test the managed image
    env:
      AZURE_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)

