# Required pipeline variables:
# - BUILD_POOL - Azure DevOps build pool to use
# - CONTAINER_IMAGE - Dev container image URL to use. Should have Azure CLI, Packer and Ansible.
# - AZURE_TENANT_ID - tenant ID
# - AZURE_CLIENT_ID - Service principal ID
# - AZURE_CLIENT_SECRET - Service principal secret
# - AZURE_SUBSCRIPTION_ID - Subscription ID used by the pipeline
# - KUBERNETES_VERSION - version of Kubernetes to build the image with, e.g. `1.16.2`
# - OS - target of build e.g. `Ubuntu/Windows`
# - OS_VERSION - target of build e.g. `18.04/2004/2019`

jobs:
- job: test_vhd
  container: $[ variables['CONTAINER_IMAGE'] ]
  timeoutInMinutes: 120
  strategy:
    maxParallel: 0
  pool:
    name: $(BUILD_POOL)
  steps:
  - task: DownloadPipelineArtifact@2
    inputs:
      source: current
      artifact: publishing-info
      path: $(system.defaultWorkingDirectory)/images/capi/packer/azure/vhd/
  - script: |
      set -o pipefail
      VHD_RESOURCE_ID=$(jq -r .vhd_url $(system.defaultWorkingDirectory)/images/capi/packer/azure/vhd/vhd-publishing-info.json)
      # TODO: make sure that we're constrained to southcentralus (where "cluster-api-images" lives) or not
      az login -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --service-principal --tenant $AZURE_TENANT_ID
      az image create -n testvmimage -g cluster-api-images --os-type Linux --source $VHD_RESOURCE_ID
      IMAGE_ID=$(az image show -g cluster-api-images -n testvmimage --query '[id]' --output tsv)
      ##vso[task.setvariable variable=MANAGED_IMAGE_ID;]$IMAGE_ID
    displayName: promote VHD blob to managed image
  - script: |
      # TODO: test the managed image
      echo "Found managed image id: ${MANAGED_IMAGE_ID}"
      # clone the CAPZ repo? Is there a better way to do this? Maybe use az capi.
      az extension add --source https://github.com/Azure/azure-capi-cli-extension/releases/download/v0.0.5/capi-0.0.5-py2.py3-none-any.whl
      # Munge test templates so they refer to our managed image
      # TODO: find location of managed image and use it for az capi create
      AZURE_LOCATION=$(az image show -g cluster-api-images -n testvmimage --query '[location]' --output tsv)
      az capi create -l $AZURE_LOCATION --template $(system.defaultWorkingDirectory)/images/capi/packer/azure/scripts/cluster-template.yaml
      # Run subset of CAPZ e2e tests
      # ./scripts/ci-e2e.sh
      # TODO: clean up the managed image
    displayName: test the managed image
