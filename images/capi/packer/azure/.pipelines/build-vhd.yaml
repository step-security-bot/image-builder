# Required pipeline variables:
# - BUILD_POOL - Azure DevOps build pool to use
# - CONTAINER_IMAGE - Dev container image URL to use. Should have Azure CLI, Packer and Ansible.
# - AZURE_TENANT_ID - tenant ID
# - AZURE_CLIENT_ID - Service principal ID
# - AZURE_CLIENT_SECRET - Service principal secret
# - AZURE_SUBSCRIPTION_ID - Subscription ID used by the pipeline
# - KUBERNETES_VERSION - version of Kubernetes to build the image with, e.g. `1.16.2`
# - OS - target of build e.g. `Ubuntu/Windows`
# - OS_VERSION - target of build e.g. `18.04/2004/2019`

jobs:
- job: build_vhd
  container: $[ variables['CONTAINER_IMAGE'] ]
  timeoutInMinutes: 120
  strategy:
    maxParallel: 0
  pool:
    name: $(BUILD_POOL)
  steps:
  - template: k8s-config.yaml
  - script: |
      set -o pipefail
      # make deps-azure
      # os=$(echo "$OS" | tr '[:upper:]' '[:lower:]')
      # version=$(echo "$OS_VERSION" | tr '[:upper:]' '[:lower:]' | tr -d .)
      # make build-azure-vhd-$os-$version | tee packer/azure/packer.out
      cat << EOF > packer/azure/vhd-publishing-info.json
      {
        "vhd_url": "https://capi1664830245jzdo.blob.core.windows.net/system/Microsoft.Compute/Images/cluster-api-vhds/capi-1664830268-osDisk.6dce93c7-8c78-4ab2-8963-c9c0c3525260.vhd",
        "vhd_sas_url": "https://capi1664830245jzdo.blob.core.windows.net/system/Microsoft.Compute/Images/cluster-api-vhds/capi-1664830268-osDisk.6dce93c7-8c78-4ab2-8963-c9c0c3525260.vhd?st=2022-10-02T00%3A00Z&se=2023-10-03T00%3A00Z&sp=rl&sv=2018-11-09&sr=c&sig=4AuDfgZyVcBEzg4dWXVuZk9iU6ayfiKvAsh7Thfw8Io%3D"
      }
      EOF
    displayName: Building VHD
    workingDirectory: '$(system.defaultWorkingDirectory)/images/capi'
    # env:
    #   AZURE_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
  # - template: generate-sas.yaml
  # - template: vhd-publishing-info.yaml
  - task: PublishPipelineArtifact@1
    inputs:
      artifact: 'publishing-info'
      path: '$(system.defaultWorkingDirectory)/images/capi/packer/azure/vhd-publishing-info.json'
    condition: eq(variables.CLEANUP, 'False')
  - template: delete-storage-account.yaml
  - script: |
      chown -R $USER:$USER .
    displayName: cleanup - chown all files in work directory
    condition: always()
